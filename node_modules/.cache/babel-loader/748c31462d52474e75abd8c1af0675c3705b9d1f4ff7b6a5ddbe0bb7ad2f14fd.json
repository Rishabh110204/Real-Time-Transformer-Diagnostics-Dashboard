{"ast":null,"code":"var _jsxFileName = \"D:\\\\000 IMP\\\\hps\\\\src\\\\scenes\\\\RealtimeTemp\\\\index.jsx\",\n  _s = $RefreshSig$();\n// TemperatureChart.js\nimport React, { useState, useEffect } from 'react';\nimport { getDatabase, ref, onValue } from 'firebase/database';\nimport { app } from \".../firebase.js\"; // Adjust the path according to your project structure\nimport { Line } from 'react-chartjs-2';\nimport { Chart, registerables } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(...registerables);\nconst database = getDatabase(app);\nconst TemperatureChart = () => {\n  _s();\n  const [chartData, setChartData] = useState({\n    labels: [],\n    datasets: [{\n      label: 'Oil Temperature',\n      data: [],\n      borderColor: 'rgba(75,192,192,1)',\n      borderWidth: 2,\n      fill: false\n    }, {\n      label: 'lv Winding Temperature',\n      data: [],\n      borderColor: 'rgba(54, 162, 235, 1)',\n      borderWidth: 2,\n      fill: false\n    }, {\n      label: 'lv1 Winding Temperature',\n      data: [],\n      borderColor: 'rgba(255, 206, 86, 1)',\n      borderWidth: 2,\n      fill: false\n    }, {\n      label: 'lv2 Winding Temperature',\n      data: [],\n      borderColor: 'rgba(153, 102, 255, 1)',\n      borderWidth: 2,\n      fill: false\n    }, {\n      label: 'hv Winding Temperature',\n      data: [],\n      borderColor: 'rgba(255, 99, 132, 1)',\n      borderWidth: 2,\n      fill: false\n    }]\n  });\n  useEffect(() => {\n    const dataRef = ref(database, 'realtimedata');\n    const unsubscribe = onValue(dataRef, snapshot => {\n      if (snapshot.exists()) {\n        const newData = snapshot.val();\n\n        // Update chart data\n        setChartData(prevState => ({\n          labels: [...prevState.labels, new Date().toLocaleTimeString()],\n          datasets: [{\n            ...prevState.datasets[0],\n            data: [...prevState.datasets[0].data, newData.ot]\n          }, {\n            ...prevState.datasets[1],\n            data: [...prevState.datasets[1].data, newData.lvt]\n          }, {\n            ...prevState.datasets[2],\n            data: [...prevState.datasets[2].data, newData.lv1t]\n          }, {\n            ...prevState.datasets[3],\n            data: [...prevState.datasets[3].data, newData.lv2t]\n          }, {\n            ...prevState.datasets[4],\n            data: [...prevState.datasets[4].data, newData.hvt]\n          }]\n        }));\n      }\n    });\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Real-Time Temperature Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n_s(TemperatureChart, \"SNhcbi12LUh3iiZ8MPsn2pDXEcI=\");\n_c = TemperatureChart;\nexport default TemperatureChart;\nvar _c;\n$RefreshReg$(_c, \"TemperatureChart\");","map":{"version":3,"names":["React","useState","useEffect","getDatabase","ref","onValue","app","Line","Chart","registerables","jsxDEV","_jsxDEV","register","database","TemperatureChart","_s","chartData","setChartData","labels","datasets","label","data","borderColor","borderWidth","fill","dataRef","unsubscribe","snapshot","exists","newData","val","prevState","Date","toLocaleTimeString","ot","lvt","lv1t","lv2t","hvt","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/000 IMP/hps/src/scenes/RealtimeTemp/index.jsx"],"sourcesContent":["// TemperatureChart.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport { getDatabase, ref, onValue } from 'firebase/database';\r\nimport { app } from \".../firebase.js\"; // Adjust the path according to your project structure\r\nimport { Line } from 'react-chartjs-2';\r\nimport { Chart, registerables } from 'chart.js';\r\n\r\nChart.register(...registerables);\r\n\r\nconst database = getDatabase(app);\r\n\r\nconst TemperatureChart = () => {\r\n  const [chartData, setChartData] = useState({\r\n    labels: [],\r\n    datasets: [\r\n      {\r\n        label: 'Oil Temperature',\r\n        data: [],\r\n        borderColor: 'rgba(75,192,192,1)',\r\n        borderWidth: 2,\r\n        fill: false\r\n      },\r\n      {\r\n        label: 'lv Winding Temperature',\r\n        data: [],\r\n        borderColor: 'rgba(54, 162, 235, 1)',\r\n        borderWidth: 2,\r\n        fill: false\r\n      },\r\n      {\r\n        label: 'lv1 Winding Temperature',\r\n        data: [],\r\n        borderColor: 'rgba(255, 206, 86, 1)',\r\n        borderWidth: 2,\r\n        fill: false\r\n      },\r\n      {\r\n        label: 'lv2 Winding Temperature',\r\n        data: [],\r\n        borderColor: 'rgba(153, 102, 255, 1)',\r\n        borderWidth: 2,\r\n        fill: false\r\n      },\r\n      {\r\n        label: 'hv Winding Temperature',\r\n        data: [],\r\n        borderColor: 'rgba(255, 99, 132, 1)',\r\n        borderWidth: 2,\r\n        fill: false\r\n      }\r\n    ]\r\n  });\r\n\r\n  useEffect(() => {\r\n    const dataRef = ref(database, 'realtimedata');\r\n    const unsubscribe = onValue(dataRef, (snapshot) => {\r\n      if (snapshot.exists()) {\r\n        const newData = snapshot.val();\r\n\r\n        // Update chart data\r\n        setChartData(prevState => ({\r\n          labels: [...prevState.labels, new Date().toLocaleTimeString()],\r\n          datasets: [\r\n            {\r\n              ...prevState.datasets[0],\r\n              data: [...prevState.datasets[0].data, newData.ot]\r\n            },\r\n            {\r\n              ...prevState.datasets[1],\r\n              data: [...prevState.datasets[1].data, newData.lvt]\r\n            },\r\n            {\r\n              ...prevState.datasets[2],\r\n              data: [...prevState.datasets[2].data, newData.lv1t]\r\n            },\r\n            {\r\n              ...prevState.datasets[3],\r\n              data: [...prevState.datasets[3].data, newData.lv2t]\r\n            },\r\n            {\r\n              ...prevState.datasets[4],\r\n              data: [...prevState.datasets[4].data, newData.hvt]\r\n            }\r\n          ]\r\n        }));\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h3>Real-Time Temperature Data</h3>\r\n      <Line data={chartData} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TemperatureChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}