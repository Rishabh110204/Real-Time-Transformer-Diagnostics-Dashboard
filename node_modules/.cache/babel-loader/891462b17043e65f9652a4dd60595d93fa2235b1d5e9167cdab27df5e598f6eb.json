{"ast":null,"code":"var _jsxFileName = \"D:\\\\000 IMP\\\\hps\\\\src\\\\scenes\\\\All_Temp\\\\index.jsx\",\n  _s = $RefreshSig$();\n// TemperatureDisplay.js\nimport React, { useEffect, useState } from 'react';\nimport { database } from '../../firebase'; // Adjust path to firebase.js as per your project structure\nimport { ref, onValue, off } from \"firebase/database\";\nimport { Line } from 'react-chartjs-2';\nimport { Chart, registerables } from 'chart.js';\nimport './Temp.css'; // Import CSS file for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(...registerables);\nconst TemperatureDisplay = () => {\n  _s();\n  const [temperatures, setTemperatures] = useState([]);\n  useEffect(() => {\n    const temperaturesRef = ref(database, 'realtimedata');\n\n    // Attach an event listener for changes in temperatures\n    const unsubscribe = onValue(temperaturesRef, snapshot => {\n      const tempData = snapshot.val();\n      console.log('Fetched data from Firebase:', tempData); // Debug log\n      if (tempData) {\n        // Convert the snapshot to an array of objects\n        const tempArray = Object.keys(tempData).map(key => ({\n          id: key,\n          timestamp: tempData[key].timestamp || new Date().toISOString(),\n          // Add current timestamp if missing\n          ...tempData[key]\n        }));\n        console.log('Formatted temperature array:', tempArray); // Debug log\n        setTemperatures(tempArray);\n      }\n    });\n\n    // Clean up listener on component unmount\n    return () => {\n      off(temperaturesRef);\n    };\n  }, []);\n  const formatChartData = (label, dataKey) => {\n    const labels = temperatures.map(temp => new Date(temp.timestamp).toLocaleTimeString());\n    const data = temperatures.map(temp => temp[dataKey]);\n    console.log(`Data for ${label}:`, data); // Debug log\n\n    return {\n      labels,\n      datasets: [{\n        label,\n        data,\n        borderColor: 'rgba(75,192,192,1)',\n        backgroundColor: 'rgba(75,192,192,0.2)',\n        borderWidth: 2,\n        fill: true\n      }]\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"temperature-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Real-Time Temperature Values\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Oil Temperature\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          data: formatChartData('Oil Temperature', 'ot')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"LV Winding Temperature\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          data: formatChartData('LV Winding Temperature', 'lvt')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"LV1 Winding Temperature\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          data: formatChartData('LV1 Winding Temperature', 'lv1t')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"LV2 Winding Temperature\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          data: formatChartData('LV2 Winding Temperature', 'lv2t')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"HV Winding Temperature\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          data: formatChartData('HV Winding Temperature', 'hvt')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(TemperatureDisplay, \"bFUqW0EkzQyiLDuCYWpIj14n8No=\");\n_c = TemperatureDisplay;\nexport default TemperatureDisplay;\nvar _c;\n$RefreshReg$(_c, \"TemperatureDisplay\");","map":{"version":3,"names":["React","useEffect","useState","database","ref","onValue","off","Line","Chart","registerables","jsxDEV","_jsxDEV","register","TemperatureDisplay","_s","temperatures","setTemperatures","temperaturesRef","unsubscribe","snapshot","tempData","val","console","log","tempArray","Object","keys","map","key","id","timestamp","Date","toISOString","formatChartData","label","dataKey","labels","temp","toLocaleTimeString","data","datasets","borderColor","backgroundColor","borderWidth","fill","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/000 IMP/hps/src/scenes/All_Temp/index.jsx"],"sourcesContent":["// TemperatureDisplay.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport { database } from '../../firebase'; // Adjust path to firebase.js as per your project structure\r\nimport { ref, onValue, off } from \"firebase/database\";\r\nimport { Line } from 'react-chartjs-2';\r\nimport { Chart, registerables } from 'chart.js';\r\nimport './Temp.css'; // Import CSS file for styling\r\n\r\nChart.register(...registerables);\r\n\r\nconst TemperatureDisplay = () => {\r\n  const [temperatures, setTemperatures] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const temperaturesRef = ref(database, 'realtimedata');\r\n\r\n    // Attach an event listener for changes in temperatures\r\n    const unsubscribe = onValue(temperaturesRef, (snapshot) => {\r\n      const tempData = snapshot.val();\r\n      console.log('Fetched data from Firebase:', tempData); // Debug log\r\n      if (tempData) {\r\n        // Convert the snapshot to an array of objects\r\n        const tempArray = Object.keys(tempData).map((key) => ({\r\n          id: key,\r\n          timestamp: tempData[key].timestamp || new Date().toISOString(), // Add current timestamp if missing\r\n          ...tempData[key],\r\n        }));\r\n        console.log('Formatted temperature array:', tempArray); // Debug log\r\n        setTemperatures(tempArray);\r\n      }\r\n    });\r\n\r\n    // Clean up listener on component unmount\r\n    return () => {\r\n      off(temperaturesRef);\r\n    };\r\n  }, []);\r\n\r\n  const formatChartData = (label, dataKey) => {\r\n    const labels = temperatures.map(temp => new Date(temp.timestamp).toLocaleTimeString());\r\n    const data = temperatures.map(temp => temp[dataKey]);\r\n    console.log(`Data for ${label}:`, data); // Debug log\r\n\r\n    return {\r\n      labels,\r\n      datasets: [{\r\n        label,\r\n        data,\r\n        borderColor: 'rgba(75,192,192,1)',\r\n        backgroundColor: 'rgba(75,192,192,0.2)',\r\n        borderWidth: 2,\r\n        fill: true\r\n      }]\r\n    };\r\n  };\r\n\r\n  return (\r\n    <div className=\"temperature-container\">\r\n      <h2>Real-Time Temperature Values</h2>\r\n      <div className=\"chart-container\">\r\n        <div className=\"chart\">\r\n          <h3>Oil Temperature</h3>\r\n          <Line data={formatChartData('Oil Temperature', 'ot')} />\r\n        </div>\r\n        <div className=\"chart\">\r\n          <h3>LV Winding Temperature</h3>\r\n          <Line data={formatChartData('LV Winding Temperature', 'lvt')} />\r\n        </div>\r\n        <div className=\"chart\">\r\n          <h3>LV1 Winding Temperature</h3>\r\n          <Line data={formatChartData('LV1 Winding Temperature', 'lv1t')} />\r\n        </div>\r\n        <div className=\"chart\">\r\n          <h3>LV2 Winding Temperature</h3>\r\n          <Line data={formatChartData('LV2 Winding Temperature', 'lv2t')} />\r\n        </div>\r\n        <div className=\"chart\">\r\n          <h3>HV Winding Temperature</h3>\r\n          <Line data={formatChartData('HV Winding Temperature', 'hvt')} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TemperatureDisplay;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}