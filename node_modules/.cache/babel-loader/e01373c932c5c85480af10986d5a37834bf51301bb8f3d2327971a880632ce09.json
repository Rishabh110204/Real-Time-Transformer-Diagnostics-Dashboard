{"ast":null,"code":"var _jsxFileName = \"D:\\\\000 IMP\\\\hps\\\\src\\\\scenes\\\\LiveMap\\\\index.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\n// import { getDatabase, ref, onValue } from 'firebase/database';\n\n// const MapComponent = () => {\n//   const [location, setLocation] = useState(null);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const db = getDatabase();\n//     const locationRef = ref(db, 'coordinates');\n\n//     onValue(locationRef, (snapshot) => {\n//       const data = snapshot.val();\n//       console.log(\"Raw Firebase data:\", data);\n\n//       if (data) {\n//         let lat, lng;\n\n//         if (typeof data === 'object' && 'latitude' in data && 'longitude' in data) {\n//           lat = data.latitude;\n//           lng = data.longitude;\n//         } else if (Array.isArray(data) && data.length >= 2) {\n//           [lat, lng] = data;\n//         } else {\n//           console.error(\"Unexpected data format:\", data);\n//           setError(\"Unexpected data format. Check console for details.\");\n//           return;\n//         }\n\n//         if (typeof lat === 'number' && typeof lng === 'number') {\n//           setLocation({ lat, lng });\n//         } else {\n//           setError(`Invalid coordinates: lat=${lat}, lng=${lng}`);\n//         }\n//       } else {\n//         setError(\"No data found in Firebase\");\n//       }\n//     }, (error) => {\n//       console.error(\"Firebase error:\", error);\n//       setError(`Error fetching location data: ${error.message}`);\n//     });\n//   }, []);\n\n//   const mapContainerStyle = {\n//     width: '100%',\n//     height: '400px'\n//   };\n\n//   if (error) {\n//     return <div>Error: {error}</div>;\n//   }\n\n//   return (\n//     <LoadScript googleMapsApiKey=\"AIzaSyBt0EBeEOhb6s_nvQqPBh_vYMFQXFG6gBc\">\n//       {location ? (\n//         <GoogleMap\n//           mapContainerStyle={mapContainerStyle}\n//           center={location}\n//           zoom={10}\n//         >\n//           <Marker position={location} />\n//         </GoogleMap>\n//       ) : (\n//         <div>Loading map...</div>\n//       )}\n//     </LoadScript>\n//   );\n// };\n\n// export default MapComponent;\n// import React, { useState, useEffect } from 'react';\n// import { Map, GoogleApiWrapper, Marker } from 'google-maps-react';\n// import {database} from 'firebase/database';\n// import { firebaseConfig } from '../../firebase'; // Assuming firebaseConfig is correctly exported from '../../firebase'\n\nimport React, { useState, useEffect } from 'react';\nimport { Map, GoogleApiWrapper, Marker } from 'google-maps-react';\nimport { app } from '../../firebase'; // Adjust the path as per your project structure\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst database = getDatabase(app);\nconst MapContainer = props => {\n  _s();\n  const [coordinates, setCoordinates] = useState({\n    lat: 0,\n    lng: 0\n  });\n  useEffect(() => {\n    const fetchCoordinates = () => {\n      const coordinatesRef = database.ref('coordinates');\n      coordinatesRef.on('value', snapshot => {\n        const coords = snapshot.val();\n        if (coords) {\n          setCoordinates(coords); // Assuming coords has { lat, lng } structure\n        }\n      });\n    };\n    fetchCoordinates();\n\n    // Cleanup function to detach the listener when component unmounts\n    return () => {\n      database.ref('coordinates').off();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Map, {\n    google: props.google,\n    zoom: 14 // Adjust zoom level as needed\n    ,\n    initialCenter: {\n      lat: coordinates.lat,\n      lng: coordinates.lng\n    },\n    children: /*#__PURE__*/_jsxDEV(Marker, {\n      position: {\n        lat: coordinates.lat,\n        lng: coordinates.lng\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n_s(MapContainer, \"qeQCOrG4pLBx2is3YUe2FumezIM=\");\n_c = MapContainer;\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyBt0EBeEOhb6s_nvQqPBh_vYMFQXFG6gBc'\n})(MapContainer);\nvar _c;\n$RefreshReg$(_c, \"MapContainer\");","map":{"version":3,"names":["React","useState","useEffect","Map","GoogleApiWrapper","Marker","app","jsxDEV","_jsxDEV","database","getDatabase","MapContainer","props","_s","coordinates","setCoordinates","lat","lng","fetchCoordinates","coordinatesRef","ref","on","snapshot","coords","val","off","google","zoom","initialCenter","children","position","fileName","_jsxFileName","lineNumber","columnNumber","_c","apiKey","$RefreshReg$"],"sources":["D:/000 IMP/hps/src/scenes/LiveMap/index.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\r\n// import { getDatabase, ref, onValue } from 'firebase/database';\r\n\r\n// const MapComponent = () => {\r\n//   const [location, setLocation] = useState(null);\r\n//   const [error, setError] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const db = getDatabase();\r\n//     const locationRef = ref(db, 'coordinates');\r\n    \r\n//     onValue(locationRef, (snapshot) => {\r\n//       const data = snapshot.val();\r\n//       console.log(\"Raw Firebase data:\", data);\r\n      \r\n//       if (data) {\r\n//         let lat, lng;\r\n        \r\n//         if (typeof data === 'object' && 'latitude' in data && 'longitude' in data) {\r\n//           lat = data.latitude;\r\n//           lng = data.longitude;\r\n//         } else if (Array.isArray(data) && data.length >= 2) {\r\n//           [lat, lng] = data;\r\n//         } else {\r\n//           console.error(\"Unexpected data format:\", data);\r\n//           setError(\"Unexpected data format. Check console for details.\");\r\n//           return;\r\n//         }\r\n        \r\n//         if (typeof lat === 'number' && typeof lng === 'number') {\r\n//           setLocation({ lat, lng });\r\n//         } else {\r\n//           setError(`Invalid coordinates: lat=${lat}, lng=${lng}`);\r\n//         }\r\n//       } else {\r\n//         setError(\"No data found in Firebase\");\r\n//       }\r\n//     }, (error) => {\r\n//       console.error(\"Firebase error:\", error);\r\n//       setError(`Error fetching location data: ${error.message}`);\r\n//     });\r\n//   }, []);\r\n\r\n//   const mapContainerStyle = {\r\n//     width: '100%',\r\n//     height: '400px'\r\n//   };\r\n\r\n//   if (error) {\r\n//     return <div>Error: {error}</div>;\r\n//   }\r\n\r\n//   return (\r\n//     <LoadScript googleMapsApiKey=\"AIzaSyBt0EBeEOhb6s_nvQqPBh_vYMFQXFG6gBc\">\r\n//       {location ? (\r\n//         <GoogleMap\r\n//           mapContainerStyle={mapContainerStyle}\r\n//           center={location}\r\n//           zoom={10}\r\n//         >\r\n//           <Marker position={location} />\r\n//         </GoogleMap>\r\n//       ) : (\r\n//         <div>Loading map...</div>\r\n//       )}\r\n//     </LoadScript>\r\n//   );\r\n// };\r\n\r\n// export default MapComponent;\r\n// import React, { useState, useEffect } from 'react';\r\n// import { Map, GoogleApiWrapper, Marker } from 'google-maps-react';\r\n// import {database} from 'firebase/database';\r\n// import { firebaseConfig } from '../../firebase'; // Assuming firebaseConfig is correctly exported from '../../firebase'\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Map, GoogleApiWrapper, Marker } from 'google-maps-react';\r\nimport { app } from '../../firebase'; // Adjust the path as per your project structure\r\n\r\nconst database = getDatabase(app);\r\n\r\nconst MapContainer = (props) => {\r\n  const [coordinates, setCoordinates] = useState({ lat: 0, lng: 0 });\r\n\r\n  useEffect(() => {\r\n    const fetchCoordinates = () => {\r\n      const coordinatesRef = database.ref('coordinates');\r\n      coordinatesRef.on('value', (snapshot) => {\r\n        const coords = snapshot.val();\r\n        if (coords) {\r\n          setCoordinates(coords); // Assuming coords has { lat, lng } structure\r\n        }\r\n      });\r\n    };\r\n\r\n    fetchCoordinates();\r\n\r\n    // Cleanup function to detach the listener when component unmounts\r\n    return () => {\r\n      database.ref('coordinates').off();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <Map\r\n      google={props.google}\r\n      zoom={14} // Adjust zoom level as needed\r\n      initialCenter={{ lat: coordinates.lat, lng: coordinates.lng }}\r\n    >\r\n      <Marker position={{ lat: coordinates.lat, lng: coordinates.lng }} />\r\n    </Map>\r\n  );\r\n};\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: 'AIzaSyBt0EBeEOhb6s_nvQqPBh_vYMFQXFG6gBc'\r\n})(MapContainer);\r\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,GAAG,EAAEC,gBAAgB,EAAEC,MAAM,QAAQ,mBAAmB;AACjE,SAASC,GAAG,QAAQ,gBAAgB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,QAAQ,GAAGC,WAAW,CAACJ,GAAG,CAAC;AAEjC,MAAMK,YAAY,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC9B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGd,QAAQ,CAAC;IAAEe,GAAG,EAAE,CAAC;IAAEC,GAAG,EAAE;EAAE,CAAC,CAAC;EAElEf,SAAS,CAAC,MAAM;IACd,MAAMgB,gBAAgB,GAAGA,CAAA,KAAM;MAC7B,MAAMC,cAAc,GAAGV,QAAQ,CAACW,GAAG,CAAC,aAAa,CAAC;MAClDD,cAAc,CAACE,EAAE,CAAC,OAAO,EAAGC,QAAQ,IAAK;QACvC,MAAMC,MAAM,GAAGD,QAAQ,CAACE,GAAG,CAAC,CAAC;QAC7B,IAAID,MAAM,EAAE;UACVR,cAAc,CAACQ,MAAM,CAAC,CAAC,CAAC;QAC1B;MACF,CAAC,CAAC;IACJ,CAAC;IAEDL,gBAAgB,CAAC,CAAC;;IAElB;IACA,OAAO,MAAM;MACXT,QAAQ,CAACW,GAAG,CAAC,aAAa,CAAC,CAACK,GAAG,CAAC,CAAC;IACnC,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEjB,OAAA,CAACL,GAAG;IACFuB,MAAM,EAAEd,KAAK,CAACc,MAAO;IACrBC,IAAI,EAAE,EAAG,CAAC;IAAA;IACVC,aAAa,EAAE;MAAEZ,GAAG,EAAEF,WAAW,CAACE,GAAG;MAAEC,GAAG,EAAEH,WAAW,CAACG;IAAI,CAAE;IAAAY,QAAA,eAE9DrB,OAAA,CAACH,MAAM;MAACyB,QAAQ,EAAE;QAAEd,GAAG,EAAEF,WAAW,CAACE,GAAG;QAAEC,GAAG,EAAEH,WAAW,CAACG;MAAI;IAAE;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjE,CAAC;AAEV,CAAC;AAACrB,EAAA,CA/BIF,YAAY;AAAAwB,EAAA,GAAZxB,YAAY;AAiClB,eAAeP,gBAAgB,CAAC;EAC9BgC,MAAM,EAAE;AACV,CAAC,CAAC,CAACzB,YAAY,CAAC;AAAC,IAAAwB,EAAA;AAAAE,YAAA,CAAAF,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}