{"ast":null,"code":"var _jsxFileName = \"D:\\\\000 IMP\\\\hps\\\\src\\\\scenes\\\\RealtimeTemp\\\\index.jsx\",\n  _s = $RefreshSig$();\n// TemperatureChart.js\nimport React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart, registerables } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(...registerables);\nconst TemperatureChart = () => {\n  _s();\n  const [chartData, setChartData] = useState({\n    labels: [],\n    datasets: [{\n      label: 'Oil Temperature',\n      data: [],\n      borderColor: 'rgba(75,192,192,1)',\n      backgroundColor: 'rgba(75,192,192,0.2)',\n      borderWidth: 2,\n      fill: true\n    }, {\n      label: 'LV Winding Temperature',\n      data: [],\n      borderColor: 'rgba(54, 162, 235, 1)',\n      backgroundColor: 'rgba(54, 162, 235, 0.2)',\n      borderWidth: 2,\n      fill: true\n    }, {\n      label: 'LV1 Winding Temperature',\n      data: [],\n      borderColor: 'rgba(255, 206, 86, 1)',\n      backgroundColor: 'rgba(255, 206, 86, 0.2)',\n      borderWidth: 2,\n      fill: true\n    }, {\n      label: 'LV2 Winding Temperature',\n      data: [],\n      borderColor: 'rgba(153, 102, 255, 1)',\n      backgroundColor: 'rgba(153, 102, 255, 0.2)',\n      borderWidth: 2,\n      fill: true\n    }, {\n      label: 'HV Winding Temperature',\n      data: [],\n      borderColor: 'rgba(255, 99, 132, 1)',\n      backgroundColor: 'rgba(255, 99, 132, 0.2)',\n      borderWidth: 2,\n      fill: true\n    }]\n  });\n  useEffect(() => {\n    // Replace 'YOUR_SCRIPT_URL' with your Google Apps Script web app URL\n    const fetchData = async () => {\n      try {\n        const response = await fetch('https://script.google.com/macros/s/AKfycbx9JWQIUa9fM4Vd6Kv2yunr2_VV_cpYj_W5cMsyIMl4mPJg5dtoiFhVL8qzydAie_VJ/exec');\n        const data = await response.json();\n        const validData = data.filter(entry => entry.ot !== null && entry.ot !== undefined && entry.lvt !== null && entry.lvt !== undefined && entry.lv1t !== null && entry.lv1t !== undefined && entry.lv2t !== null && entry.lv2t !== undefined && entry.hvt !== null && entry.hvt !== undefined);\n        const labels = validData.map(entry => new Date(entry.timestamp).toLocaleTimeString());\n        const oilTemp = validData.map(entry => entry.ot);\n        const lvTemp = validData.map(entry => entry.lvt);\n        const lv1Temp = validData.map(entry => entry.lv1t);\n        const lv2Temp = validData.map(entry => entry.lv2t);\n        const hvTemp = validData.map(entry => entry.hvt);\n        setChartData({\n          labels: labels,\n          datasets: [{\n            label: 'Oil Temperature',\n            data: oilTemp,\n            borderColor: 'rgba(75,192,192,1)',\n            backgroundColor: 'rgba(75,192,192,0.2)',\n            borderWidth: 2,\n            fill: true\n          }, {\n            label: 'LV Winding Temperature',\n            data: lvTemp,\n            borderColor: 'rgba(54, 162, 235, 1)',\n            backgroundColor: 'rgba(54, 162, 235, 0.2)',\n            borderWidth: 2,\n            fill: true\n          }, {\n            label: 'LV1 Winding Temperature',\n            data: lv1Temp,\n            borderColor: 'rgba(255, 206, 86, 1)',\n            backgroundColor: 'rgba(255, 206, 86, 0.2)',\n            borderWidth: 2,\n            fill: true\n          }, {\n            label: 'LV2 Winding Temperature',\n            data: lv2Temp,\n            borderColor: 'rgba(153, 102, 255, 1)',\n            backgroundColor: 'rgba(153, 102, 255, 0.2)',\n            borderWidth: 2,\n            fill: true\n          }, {\n            label: 'HV Winding Temperature',\n            data: hvTemp,\n            borderColor: 'rgba(255, 99, 132, 1)',\n            backgroundColor: 'rgba(255, 99, 132, 0.2)',\n            borderWidth: 2,\n            fill: true\n          }]\n        });\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '80%',\n      margin: 'auto',\n      height: '90%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Latest 15 Temperature Records\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData,\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          legend: {\n            display: true,\n            position: 'top'\n          },\n          tooltip: {\n            mode: 'index',\n            intersect: false\n          }\n        },\n        scales: {\n          x: {\n            display: true,\n            title: {\n              display: true,\n              text: 'Time'\n            }\n          },\n          y: {\n            display: true,\n            title: {\n              display: true,\n              text: 'Temperature (Â°C)'\n            }\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n};\n_s(TemperatureChart, \"1+hbA6n4ojULxPpqVwtx0Hy/Zn4=\");\n_c = TemperatureChart;\nexport default TemperatureChart;\nvar _c;\n$RefreshReg$(_c, \"TemperatureChart\");","map":{"version":3,"names":["React","useState","useEffect","Line","Chart","registerables","jsxDEV","_jsxDEV","register","TemperatureChart","_s","chartData","setChartData","labels","datasets","label","data","borderColor","backgroundColor","borderWidth","fill","fetchData","response","fetch","json","validData","filter","entry","ot","undefined","lvt","lv1t","lv2t","hvt","map","Date","timestamp","toLocaleTimeString","oilTemp","lvTemp","lv1Temp","lv2Temp","hvTemp","error","console","style","width","margin","height","children","fileName","_jsxFileName","lineNumber","columnNumber","options","responsive","maintainAspectRatio","plugins","legend","display","position","tooltip","mode","intersect","scales","x","title","text","y","_c","$RefreshReg$"],"sources":["D:/000 IMP/hps/src/scenes/RealtimeTemp/index.jsx"],"sourcesContent":["// TemperatureChart.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { Chart, registerables } from 'chart.js';\r\n\r\nChart.register(...registerables);\r\n\r\nconst TemperatureChart = () => {\r\n  const [chartData, setChartData] = useState({\r\n    labels: [],\r\n    datasets: [\r\n      {\r\n        label: 'Oil Temperature',\r\n        data: [],\r\n        borderColor: 'rgba(75,192,192,1)',\r\n        backgroundColor: 'rgba(75,192,192,0.2)',\r\n        borderWidth: 2,\r\n        fill: true\r\n      },\r\n      {\r\n        label: 'LV Winding Temperature',\r\n        data: [],\r\n        borderColor: 'rgba(54, 162, 235, 1)',\r\n        backgroundColor: 'rgba(54, 162, 235, 0.2)',\r\n        borderWidth: 2,\r\n        fill: true\r\n      },\r\n      {\r\n        label: 'LV1 Winding Temperature',\r\n        data: [],\r\n        borderColor: 'rgba(255, 206, 86, 1)',\r\n        backgroundColor: 'rgba(255, 206, 86, 0.2)',\r\n        borderWidth: 2,\r\n        fill: true\r\n      },\r\n      {\r\n        label: 'LV2 Winding Temperature',\r\n        data: [],\r\n        borderColor: 'rgba(153, 102, 255, 1)',\r\n        backgroundColor: 'rgba(153, 102, 255, 0.2)',\r\n        borderWidth: 2,\r\n        fill: true\r\n      },\r\n      {\r\n        label: 'HV Winding Temperature',\r\n        data: [],\r\n        borderColor: 'rgba(255, 99, 132, 1)',\r\n        backgroundColor: 'rgba(255, 99, 132, 0.2)',\r\n        borderWidth: 2,\r\n        fill: true\r\n      }\r\n    ]\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Replace 'YOUR_SCRIPT_URL' with your Google Apps Script web app URL\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch('https://script.google.com/macros/s/AKfycbx9JWQIUa9fM4Vd6Kv2yunr2_VV_cpYj_W5cMsyIMl4mPJg5dtoiFhVL8qzydAie_VJ/exec');\r\n        const data = await response.json();\r\n        \r\n        const validData = data.filter(entry => entry.ot !== null && entry.ot !== undefined && \r\n          entry.lvt !== null && entry.lvt !== undefined && \r\n          entry.lv1t !== null && entry.lv1t !== undefined && \r\n          entry.lv2t !== null && entry.lv2t !== undefined && \r\n          entry.hvt !== null && entry.hvt !== undefined);\r\n\r\n        const labels = validData.map(entry => new Date(entry.timestamp).toLocaleTimeString());\r\n        const oilTemp = validData.map(entry => entry.ot);\r\n        const lvTemp = validData.map(entry => entry.lvt);\r\n        const lv1Temp = validData.map(entry => entry.lv1t);\r\n        const lv2Temp = validData.map(entry => entry.lv2t);\r\n        const hvTemp = validData.map(entry => entry.hvt);\r\n\r\n        setChartData({\r\n          labels: labels,\r\n          datasets: [\r\n            {\r\n              label: 'Oil Temperature',\r\n              data: oilTemp,\r\n              borderColor: 'rgba(75,192,192,1)',\r\n              backgroundColor: 'rgba(75,192,192,0.2)',\r\n              borderWidth: 2,\r\n              fill: true\r\n            },\r\n            {\r\n              label: 'LV Winding Temperature',\r\n              data: lvTemp,\r\n              borderColor: 'rgba(54, 162, 235, 1)',\r\n              backgroundColor: 'rgba(54, 162, 235, 0.2)',\r\n              borderWidth: 2,\r\n              fill: true\r\n            },\r\n            {\r\n              label: 'LV1 Winding Temperature',\r\n              data: lv1Temp,\r\n              borderColor: 'rgba(255, 206, 86, 1)',\r\n              backgroundColor: 'rgba(255, 206, 86, 0.2)',\r\n              borderWidth: 2,\r\n              fill: true\r\n            },\r\n            {\r\n              label: 'LV2 Winding Temperature',\r\n              data: lv2Temp,\r\n              borderColor: 'rgba(153, 102, 255, 1)',\r\n              backgroundColor: 'rgba(153, 102, 255, 0.2)',\r\n              borderWidth: 2,\r\n              fill: true\r\n            },\r\n            {\r\n              label: 'HV Winding Temperature',\r\n              data: hvTemp,\r\n              borderColor: 'rgba(255, 99, 132, 1)',\r\n              backgroundColor: 'rgba(255, 99, 132, 0.2)',\r\n              borderWidth: 2,\r\n              fill: true\r\n            }\r\n          ]\r\n        });\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <div style={{ width: '80%', margin: 'auto', height: '90%' }}>\r\n      <h3>Latest 15 Temperature Records</h3>\r\n      <Line\r\n        data={chartData}\r\n        options={{\r\n          responsive: true,\r\n          maintainAspectRatio: false,\r\n          plugins: {\r\n            legend: {\r\n              display: true,\r\n              position: 'top'\r\n            },\r\n            tooltip: {\r\n              mode: 'index',\r\n              intersect: false\r\n            }\r\n          },\r\n          scales: {\r\n            x: {\r\n              display: true,\r\n              title: {\r\n                display: true,\r\n                text: 'Time'\r\n              }\r\n            },\r\n            y: {\r\n              display: true,\r\n              title: {\r\n                display: true,\r\n                text: 'Temperature (Â°C)'\r\n              }\r\n            }\r\n          }\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TemperatureChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}