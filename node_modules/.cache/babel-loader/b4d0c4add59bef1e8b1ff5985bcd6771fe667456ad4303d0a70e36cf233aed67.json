{"ast":null,"code":"var _jsxFileName = \"D:\\\\000 IMP\\\\hps\\\\src\\\\scenes\\\\LiveMap\\\\index.jsx\",\n  _s = $RefreshSig$();\n// index.jsx\n\nimport { app } from '../../firebase'; // Adjust the path as per your project structure\nimport { getDatabase, ref, onValue, off } from \"firebase/database\";\n\n// index.jsx\nimport React, { useState, useEffect } from 'react';\nimport { Map, GoogleApiWrapper, Marker } from 'google-maps-react';\n// Adjust the path as per your project structure\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst database = getDatabase(app);\nconst MapContainer = props => {\n  _s();\n  const [coordinates, setCoordinates] = useState({\n    lat: 0,\n    lng: 0\n  });\n  useEffect(() => {\n    const fetchCoordinates = () => {\n      const coordinatesRef = database.ref('coordinates'); // Reference to 'coordinates' node\n      coordinatesRef.on('value', snapshot => {\n        const coords = snapshot.val();\n        if (coords && isValidCoordinates(coords.lat, coords.lng)) {\n          setCoordinates(coords); // Set coordinates state if valid\n        }\n      });\n\n      // Cleanup function to detach the listener when component unmounts\n      return () => {\n        coordinatesRef.off(); // Detach listener\n      };\n    };\n    fetchCoordinates();\n  }, []);\n\n  // Function to check if coordinates are valid\n  const isValidCoordinates = (lat, lng) => {\n    return lat && lng && !isNaN(lat) && !isNaN(lng);\n  };\n  return /*#__PURE__*/_jsxDEV(Map, {\n    google: props.google,\n    zoom: 14 // Adjust zoom level as needed\n    ,\n    initialCenter: {\n      lat: coordinates.lat,\n      lng: coordinates.lng\n    },\n    center: {\n      lat: coordinates.lat,\n      lng: coordinates.lng\n    } // Ensure center is also set\n    ,\n    children: isValidCoordinates(coordinates.lat, coordinates.lng) && /*#__PURE__*/_jsxDEV(Marker, {\n      position: {\n        lat: coordinates.lat,\n        lng: coordinates.lng\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(MapContainer, \"qeQCOrG4pLBx2is3YUe2FumezIM=\");\n_c = MapContainer;\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyBt0EBeEOhb6s_nvQqPBh_vYMFQXFG6gBc' // Replace with your Google Maps API key\n})(MapContainer);\nvar _c;\n$RefreshReg$(_c, \"MapContainer\");","map":{"version":3,"names":["app","getDatabase","ref","onValue","off","React","useState","useEffect","Map","GoogleApiWrapper","Marker","jsxDEV","_jsxDEV","database","MapContainer","props","_s","coordinates","setCoordinates","lat","lng","fetchCoordinates","coordinatesRef","on","snapshot","coords","val","isValidCoordinates","isNaN","google","zoom","initialCenter","center","children","position","fileName","_jsxFileName","lineNumber","columnNumber","_c","apiKey","$RefreshReg$"],"sources":["D:/000 IMP/hps/src/scenes/LiveMap/index.jsx"],"sourcesContent":["// index.jsx\r\n\r\nimport { app } from '../../firebase'; // Adjust the path as per your project structure\r\nimport { getDatabase, ref, onValue, off } from \"firebase/database\";\r\n\r\n\r\n\r\n// index.jsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Map, GoogleApiWrapper, Marker } from 'google-maps-react';\r\n // Adjust the path as per your project structure\r\n const database = getDatabase(app);\r\nconst MapContainer = (props) => {\r\n  const [coordinates, setCoordinates] = useState({ lat: 0, lng: 0 });\r\n\r\n  useEffect(() => {\r\n    const fetchCoordinates = () => {\r\n      const coordinatesRef = database.ref('coordinates'); // Reference to 'coordinates' node\r\n      coordinatesRef.on('value', (snapshot) => {\r\n        const coords = snapshot.val();\r\n        if (coords && isValidCoordinates(coords.lat, coords.lng)) {\r\n          setCoordinates(coords); // Set coordinates state if valid\r\n        }\r\n      });\r\n\r\n      // Cleanup function to detach the listener when component unmounts\r\n      return () => {\r\n        coordinatesRef.off(); // Detach listener\r\n      };\r\n    };\r\n\r\n    fetchCoordinates();\r\n  }, []);\r\n\r\n  // Function to check if coordinates are valid\r\n  const isValidCoordinates = (lat, lng) => {\r\n    return lat && lng && !isNaN(lat) && !isNaN(lng);\r\n  };\r\n\r\n  return (\r\n    <Map\r\n      google={props.google}\r\n      zoom={14} // Adjust zoom level as needed\r\n      initialCenter={{ lat: coordinates.lat, lng: coordinates.lng }}\r\n      center={{ lat: coordinates.lat, lng: coordinates.lng }} // Ensure center is also set\r\n    >\r\n      {isValidCoordinates(coordinates.lat, coordinates.lng) && (\r\n        <Marker position={{ lat: coordinates.lat, lng: coordinates.lng }} />\r\n      )}\r\n    </Map>\r\n  );\r\n};\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: 'AIzaSyBt0EBeEOhb6s_nvQqPBh_vYMFQXFG6gBc' // Replace with your Google Maps API key\r\n})(MapContainer);\r\n\r\n"],"mappings":";;AAAA;;AAEA,SAASA,GAAG,QAAQ,gBAAgB,CAAC,CAAC;AACtC,SAASC,WAAW,EAAEC,GAAG,EAAEC,OAAO,EAAEC,GAAG,QAAQ,mBAAmB;;AAIlE;AACA,OAAOC,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,GAAG,EAAEC,gBAAgB,EAAEC,MAAM,QAAQ,mBAAmB;AAChE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,QAAQ,GAAGZ,WAAW,CAACD,GAAG,CAAC;AAClC,MAAMc,YAAY,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC9B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC;IAAEa,GAAG,EAAE,CAAC;IAAEC,GAAG,EAAE;EAAE,CAAC,CAAC;EAElEb,SAAS,CAAC,MAAM;IACd,MAAMc,gBAAgB,GAAGA,CAAA,KAAM;MAC7B,MAAMC,cAAc,GAAGT,QAAQ,CAACX,GAAG,CAAC,aAAa,CAAC,CAAC,CAAC;MACpDoB,cAAc,CAACC,EAAE,CAAC,OAAO,EAAGC,QAAQ,IAAK;QACvC,MAAMC,MAAM,GAAGD,QAAQ,CAACE,GAAG,CAAC,CAAC;QAC7B,IAAID,MAAM,IAAIE,kBAAkB,CAACF,MAAM,CAACN,GAAG,EAAEM,MAAM,CAACL,GAAG,CAAC,EAAE;UACxDF,cAAc,CAACO,MAAM,CAAC,CAAC,CAAC;QAC1B;MACF,CAAC,CAAC;;MAEF;MACA,OAAO,MAAM;QACXH,cAAc,CAAClB,GAAG,CAAC,CAAC,CAAC,CAAC;MACxB,CAAC;IACH,CAAC;IAEDiB,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMM,kBAAkB,GAAGA,CAACR,GAAG,EAAEC,GAAG,KAAK;IACvC,OAAOD,GAAG,IAAIC,GAAG,IAAI,CAACQ,KAAK,CAACT,GAAG,CAAC,IAAI,CAACS,KAAK,CAACR,GAAG,CAAC;EACjD,CAAC;EAED,oBACER,OAAA,CAACJ,GAAG;IACFqB,MAAM,EAAEd,KAAK,CAACc,MAAO;IACrBC,IAAI,EAAE,EAAG,CAAC;IAAA;IACVC,aAAa,EAAE;MAAEZ,GAAG,EAAEF,WAAW,CAACE,GAAG;MAAEC,GAAG,EAAEH,WAAW,CAACG;IAAI,CAAE;IAC9DY,MAAM,EAAE;MAAEb,GAAG,EAAEF,WAAW,CAACE,GAAG;MAAEC,GAAG,EAAEH,WAAW,CAACG;IAAI,CAAE,CAAC;IAAA;IAAAa,QAAA,EAEvDN,kBAAkB,CAACV,WAAW,CAACE,GAAG,EAAEF,WAAW,CAACG,GAAG,CAAC,iBACnDR,OAAA,CAACF,MAAM;MAACwB,QAAQ,EAAE;QAAEf,GAAG,EAAEF,WAAW,CAACE,GAAG;QAAEC,GAAG,EAAEH,WAAW,CAACG;MAAI;IAAE;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EACpE;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACtB,EAAA,CAvCIF,YAAY;AAAAyB,EAAA,GAAZzB,YAAY;AAyClB,eAAeL,gBAAgB,CAAC;EAC9B+B,MAAM,EAAE,yCAAyC,CAAC;AACpD,CAAC,CAAC,CAAC1B,YAAY,CAAC;AAAC,IAAAyB,EAAA;AAAAE,YAAA,CAAAF,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}