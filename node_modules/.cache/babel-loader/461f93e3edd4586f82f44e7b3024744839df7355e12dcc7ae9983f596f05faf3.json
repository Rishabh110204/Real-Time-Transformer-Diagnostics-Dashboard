{"ast":null,"code":"var _jsxFileName = \"D:\\\\000 IMP\\\\hps\\\\src\\\\scenes\\\\All_Temp\\\\index.jsx\",\n  _s = $RefreshSig$();\n// // TemperatureDisplay.js\n// import React, { useEffect, useState } from 'react';\n// import { database } from '../../firebase'; // Adjust path to firebase.js as per your project structure\n// import { ref, onValue, off } from \"firebase/database\";\n// import { Line } from 'react-chartjs-2';\n// import { Chart, registerables } from 'chart.js';\n// import './Temp.css'; // Import CSS file for styling\n\n// Chart.register(...registerables);\n\n// const TemperatureDisplay = () => {\n//   const [temperatures, setTemperatures] = useState([]);\n\n//   useEffect(() => {\n//     const temperaturesRef = ref(database, 'realtimedata');\n\n//     // Attach an event listener for changes in temperatures\n//     const unsubscribe = onValue(temperaturesRef, (snapshot) => {\n//       const tempData = snapshot.val();\n//       console.log('Fetched data from Firebase:', tempData); // Debug log\n//       if (tempData) {\n//         // Convert the snapshot to an array of objects\n//         const tempArray = Object.keys(tempData).map((key) => ({\n//           id: key,\n//           ...tempData[key],\n//           timestamp: tempData[key].timestamp || new Date().toISOString(), // Add current timestamp if missing\n//         }));\n//         console.log('Formatted temperature array:', tempArray); // Debug log\n//         setTemperatures(tempArray);\n//       }\n//     });\n\n//     // Clean up listener on component unmount\n//     return () => {\n//       off(temperaturesRef);\n//     };\n//   }, []);\n\n//   const formatChartData = (label, dataKey) => {\n//     const labels = temperatures.map(temp => new Date(temp.timestamp).toLocaleTimeString());\n//     const data = temperatures.map(temp => temp[dataKey]);\n//     console.log(`Data for ${label}:`, data); // Debug log\n\n//     return {\n//       labels,\n//       datasets: [{\n//         label,\n//         data,\n//         borderColor: 'rgba(75,192,192,1)',\n//         backgroundColor: 'rgba(75,192,192,0.2)',\n//         borderWidth: 2,\n//         fill: true\n//       }]\n//     };\n//   };\n\n//   return (\n//     <div className=\"temperature-container\">\n//       <h2>Real-Time Temperature Values</h2>\n//       <div className=\"chart-container\">\n//         <div className=\"chart\">\n//           <h3>Oil Temperature</h3>\n//           <Line data={formatChartData('Oil Temperature', 'ot')} />\n//         </div>\n//         <div className=\"chart\">\n//           <h3>LV Winding Temperature</h3>\n//           <Line data={formatChartData('LV Winding Temperature', 'lvt')} />\n//         </div>\n//         <div className=\"chart\">\n//           <h3>LV1 Winding Temperature</h3>\n//           <Line data={formatChartData('LV1 Winding Temperature', 'lv1t')} />\n//         </div>\n//         <div className=\"chart\">\n//           <h3>LV2 Winding Temperature</h3>\n//           <Line data={formatChartData('LV2 Winding Temperature', 'lv2t')} />\n//         </div>\n//         <div className=\"chart\">\n//           <h3>HV Winding Temperature</h3>\n//           <Line data={formatChartData('HV Winding Temperature', 'hvt')} />\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default TemperatureDisplay;\n\nimport React, { useEffect, useState } from 'react';\nimport firebase from 'firebase/app';\nimport 'firebase/database';\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TemperatureGraph = () => {\n  _s();\n  const [temperatures, setTemperatures] = useState([]);\n  useEffect(() => {\n    const fetchData = () => {\n      const db = firebase.database();\n      const ref = db.ref('realtimedata/ot'); // Adjust path as per your database structure\n\n      ref.on('value', snapshot => {\n        const data = snapshot.val();\n        if (data) {\n          const temperatureValues = Object.values(data);\n          setTemperatures(temperatureValues);\n        }\n      });\n    };\n    fetchData();\n\n    // Clean up listener on unmount\n    return () => {\n      const db = firebase.database();\n      const ref = db.ref('realtimedata/ot');\n      ref.off();\n    };\n  }, []);\n\n  // Prepare data for Chart.js\n  const data = {\n    labels: temperatures.map((_, index) => `Data Point ${index + 1}`),\n    datasets: [{\n      label: 'Temperature Data',\n      fill: false,\n      lineTension: 0.1,\n      backgroundColor: 'rgba(75,192,192,0.4)',\n      borderColor: 'rgba(75,192,192,1)',\n      borderCapStyle: 'butt',\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: 'miter',\n      pointBorderColor: 'rgba(75,192,192,1)',\n      pointBackgroundColor: '#fff',\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n      pointHoverBorderColor: 'rgba(220,220,220,1)',\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10,\n      data: temperatures\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Real-time Temperature Graph\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n};\n_s(TemperatureGraph, \"bFUqW0EkzQyiLDuCYWpIj14n8No=\");\n_c = TemperatureGraph;\nexport default TemperatureGraph;\nvar _c;\n$RefreshReg$(_c, \"TemperatureGraph\");","map":{"version":3,"names":["React","useEffect","useState","firebase","Line","jsxDEV","_jsxDEV","TemperatureGraph","_s","temperatures","setTemperatures","fetchData","db","database","ref","on","snapshot","data","val","temperatureValues","Object","values","off","labels","map","_","index","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/000 IMP/hps/src/scenes/All_Temp/index.jsx"],"sourcesContent":["// // TemperatureDisplay.js\r\n// import React, { useEffect, useState } from 'react';\r\n// import { database } from '../../firebase'; // Adjust path to firebase.js as per your project structure\r\n// import { ref, onValue, off } from \"firebase/database\";\r\n// import { Line } from 'react-chartjs-2';\r\n// import { Chart, registerables } from 'chart.js';\r\n// import './Temp.css'; // Import CSS file for styling\r\n\r\n// Chart.register(...registerables);\r\n\r\n// const TemperatureDisplay = () => {\r\n//   const [temperatures, setTemperatures] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     const temperaturesRef = ref(database, 'realtimedata');\r\n\r\n//     // Attach an event listener for changes in temperatures\r\n//     const unsubscribe = onValue(temperaturesRef, (snapshot) => {\r\n//       const tempData = snapshot.val();\r\n//       console.log('Fetched data from Firebase:', tempData); // Debug log\r\n//       if (tempData) {\r\n//         // Convert the snapshot to an array of objects\r\n//         const tempArray = Object.keys(tempData).map((key) => ({\r\n//           id: key,\r\n//           ...tempData[key],\r\n//           timestamp: tempData[key].timestamp || new Date().toISOString(), // Add current timestamp if missing\r\n//         }));\r\n//         console.log('Formatted temperature array:', tempArray); // Debug log\r\n//         setTemperatures(tempArray);\r\n//       }\r\n//     });\r\n\r\n//     // Clean up listener on component unmount\r\n//     return () => {\r\n//       off(temperaturesRef);\r\n//     };\r\n//   }, []);\r\n\r\n//   const formatChartData = (label, dataKey) => {\r\n//     const labels = temperatures.map(temp => new Date(temp.timestamp).toLocaleTimeString());\r\n//     const data = temperatures.map(temp => temp[dataKey]);\r\n//     console.log(`Data for ${label}:`, data); // Debug log\r\n\r\n//     return {\r\n//       labels,\r\n//       datasets: [{\r\n//         label,\r\n//         data,\r\n//         borderColor: 'rgba(75,192,192,1)',\r\n//         backgroundColor: 'rgba(75,192,192,0.2)',\r\n//         borderWidth: 2,\r\n//         fill: true\r\n//       }]\r\n//     };\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"temperature-container\">\r\n//       <h2>Real-Time Temperature Values</h2>\r\n//       <div className=\"chart-container\">\r\n//         <div className=\"chart\">\r\n//           <h3>Oil Temperature</h3>\r\n//           <Line data={formatChartData('Oil Temperature', 'ot')} />\r\n//         </div>\r\n//         <div className=\"chart\">\r\n//           <h3>LV Winding Temperature</h3>\r\n//           <Line data={formatChartData('LV Winding Temperature', 'lvt')} />\r\n//         </div>\r\n//         <div className=\"chart\">\r\n//           <h3>LV1 Winding Temperature</h3>\r\n//           <Line data={formatChartData('LV1 Winding Temperature', 'lv1t')} />\r\n//         </div>\r\n//         <div className=\"chart\">\r\n//           <h3>LV2 Winding Temperature</h3>\r\n//           <Line data={formatChartData('LV2 Winding Temperature', 'lv2t')} />\r\n//         </div>\r\n//         <div className=\"chart\">\r\n//           <h3>HV Winding Temperature</h3>\r\n//           <Line data={formatChartData('HV Winding Temperature', 'hvt')} />\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default TemperatureDisplay;\r\n\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nconst TemperatureGraph = () => {\r\n  const [temperatures, setTemperatures] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = () => {\r\n      const db = firebase.database();\r\n      const ref = db.ref('realtimedata/ot'); // Adjust path as per your database structure\r\n      \r\n      ref.on('value', (snapshot) => {\r\n        const data = snapshot.val();\r\n        if (data) {\r\n          const temperatureValues = Object.values(data);\r\n          setTemperatures(temperatureValues);\r\n        }\r\n      });\r\n    };\r\n\r\n    fetchData();\r\n\r\n    // Clean up listener on unmount\r\n    return () => {\r\n      const db = firebase.database();\r\n      const ref = db.ref('realtimedata/ot');\r\n      ref.off();\r\n    };\r\n  }, []);\r\n\r\n  // Prepare data for Chart.js\r\n  const data = {\r\n    labels: temperatures.map((_, index) => `Data Point ${index + 1}`),\r\n    datasets: [\r\n      {\r\n        label: 'Temperature Data',\r\n        fill: false,\r\n        lineTension: 0.1,\r\n        backgroundColor: 'rgba(75,192,192,0.4)',\r\n        borderColor: 'rgba(75,192,192,1)',\r\n        borderCapStyle: 'butt',\r\n        borderDash: [],\r\n        borderDashOffset: 0.0,\r\n        borderJoinStyle: 'miter',\r\n        pointBorderColor: 'rgba(75,192,192,1)',\r\n        pointBackgroundColor: '#fff',\r\n        pointBorderWidth: 1,\r\n        pointHoverRadius: 5,\r\n        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n        pointHoverBorderWidth: 2,\r\n        pointRadius: 1,\r\n        pointHitRadius: 10,\r\n        data: temperatures,\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Real-time Temperature Graph</h2>\r\n      <Line data={data} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TemperatureGraph;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}