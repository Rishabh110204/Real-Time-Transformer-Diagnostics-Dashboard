{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\n// import { getDatabase, ref, onValue } from 'firebase/database';\n\n// const MapComponent = () => {\n//   const [location, setLocation] = useState(null);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     const db = getDatabase();\n//     const locationRef = ref(db, 'coordinates');\n\n//     onValue(locationRef, (snapshot) => {\n//       const data = snapshot.val();\n//       console.log(\"Raw Firebase data:\", data);\n\n//       if (data) {\n//         let lat, lng;\n\n//         if (typeof data === 'object' && 'latitude' in data && 'longitude' in data) {\n//           lat = data.latitude;\n//           lng = data.longitude;\n//         } else if (Array.isArray(data) && data.length >= 2) {\n//           [lat, lng] = data;\n//         } else {\n//           console.error(\"Unexpected data format:\", data);\n//           setError(\"Unexpected data format. Check console for details.\");\n//           return;\n//         }\n\n//         if (typeof lat === 'number' && typeof lng === 'number') {\n//           setLocation({ lat, lng });\n//         } else {\n//           setError(`Invalid coordinates: lat=${lat}, lng=${lng}`);\n//         }\n//       } else {\n//         setError(\"No data found in Firebase\");\n//       }\n//     }, (error) => {\n//       console.error(\"Firebase error:\", error);\n//       setError(`Error fetching location data: ${error.message}`);\n//     });\n//   }, []);\n\n//   const mapContainerStyle = {\n//     width: '100%',\n//     height: '400px'\n//   };\n\n//   if (error) {\n//     return <div>Error: {error}</div>;\n//   }\n\n//   return (\n//     <LoadScript googleMapsApiKey=\"AIzaSyBt0EBeEOhb6s_nvQqPBh_vYMFQXFG6gBc\">\n//       {location ? (\n//         <GoogleMap\n//           mapContainerStyle={mapContainerStyle}\n//           center={location}\n//           zoom={10}\n//         >\n//           <Marker position={location} />\n//         </GoogleMap>\n//       ) : (\n//         <div>Loading map...</div>\n//       )}\n//     </LoadScript>\n//   );\n// };\n\n// export default MapComponent;\nimport React, { useState, useEffect } from 'react';\nimport { Loader } from \"@googlemaps/js-api-loader\";\nconst loader = new Loader({\n  apiKey: \"YOUR_API_KEY\",\n  version: \"weekly\",\n  ...additionalOptions\n});\nloader.load().then(async () => {\n  const {\n    Map\n  } = await google.maps.importLibrary(\"maps\");\n  map = new Map(document.getElementById(\"map\"), {\n    center: {\n      lat: -34.397,\n      lng: 150.644\n    },\n    zoom: 8\n  });\n});","map":{"version":3,"names":["React","useState","useEffect","Loader","loader","apiKey","version","additionalOptions","load","then","Map","google","maps","importLibrary","map","document","getElementById","center","lat","lng","zoom"],"sources":["D:/000 IMP/hps/src/scenes/LiveMap/index.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\r\n// import { getDatabase, ref, onValue } from 'firebase/database';\r\n\r\n// const MapComponent = () => {\r\n//   const [location, setLocation] = useState(null);\r\n//   const [error, setError] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const db = getDatabase();\r\n//     const locationRef = ref(db, 'coordinates');\r\n    \r\n//     onValue(locationRef, (snapshot) => {\r\n//       const data = snapshot.val();\r\n//       console.log(\"Raw Firebase data:\", data);\r\n      \r\n//       if (data) {\r\n//         let lat, lng;\r\n        \r\n//         if (typeof data === 'object' && 'latitude' in data && 'longitude' in data) {\r\n//           lat = data.latitude;\r\n//           lng = data.longitude;\r\n//         } else if (Array.isArray(data) && data.length >= 2) {\r\n//           [lat, lng] = data;\r\n//         } else {\r\n//           console.error(\"Unexpected data format:\", data);\r\n//           setError(\"Unexpected data format. Check console for details.\");\r\n//           return;\r\n//         }\r\n        \r\n//         if (typeof lat === 'number' && typeof lng === 'number') {\r\n//           setLocation({ lat, lng });\r\n//         } else {\r\n//           setError(`Invalid coordinates: lat=${lat}, lng=${lng}`);\r\n//         }\r\n//       } else {\r\n//         setError(\"No data found in Firebase\");\r\n//       }\r\n//     }, (error) => {\r\n//       console.error(\"Firebase error:\", error);\r\n//       setError(`Error fetching location data: ${error.message}`);\r\n//     });\r\n//   }, []);\r\n\r\n//   const mapContainerStyle = {\r\n//     width: '100%',\r\n//     height: '400px'\r\n//   };\r\n\r\n//   if (error) {\r\n//     return <div>Error: {error}</div>;\r\n//   }\r\n\r\n//   return (\r\n//     <LoadScript googleMapsApiKey=\"AIzaSyBt0EBeEOhb6s_nvQqPBh_vYMFQXFG6gBc\">\r\n//       {location ? (\r\n//         <GoogleMap\r\n//           mapContainerStyle={mapContainerStyle}\r\n//           center={location}\r\n//           zoom={10}\r\n//         >\r\n//           <Marker position={location} />\r\n//         </GoogleMap>\r\n//       ) : (\r\n//         <div>Loading map...</div>\r\n//       )}\r\n//     </LoadScript>\r\n//   );\r\n// };\r\n\r\n// export default MapComponent;\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Loader } from \"@googlemaps/js-api-loader\"\r\n\r\nconst loader = new Loader({\r\n    apiKey: \"YOUR_API_KEY\",\r\n    version: \"weekly\",\r\n    ...additionalOptions,\r\n  });\r\n  \r\n  loader.load().then(async () => {\r\n    const { Map } = await google.maps.importLibrary(\"maps\");\r\n  \r\n    map = new Map(document.getElementById(\"map\"), {\r\n      center: { lat: -34.397, lng: 150.644 },\r\n      zoom: 8,\r\n    });\r\n  });\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,MAAM,QAAQ,2BAA2B;AAElD,MAAMC,MAAM,GAAG,IAAID,MAAM,CAAC;EACtBE,MAAM,EAAE,cAAc;EACtBC,OAAO,EAAE,QAAQ;EACjB,GAAGC;AACL,CAAC,CAAC;AAEFH,MAAM,CAACI,IAAI,CAAC,CAAC,CAACC,IAAI,CAAC,YAAY;EAC7B,MAAM;IAAEC;EAAI,CAAC,GAAG,MAAMC,MAAM,CAACC,IAAI,CAACC,aAAa,CAAC,MAAM,CAAC;EAEvDC,GAAG,GAAG,IAAIJ,GAAG,CAACK,QAAQ,CAACC,cAAc,CAAC,KAAK,CAAC,EAAE;IAC5CC,MAAM,EAAE;MAAEC,GAAG,EAAE,CAAC,MAAM;MAAEC,GAAG,EAAE;IAAQ,CAAC;IACtCC,IAAI,EAAE;EACR,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}