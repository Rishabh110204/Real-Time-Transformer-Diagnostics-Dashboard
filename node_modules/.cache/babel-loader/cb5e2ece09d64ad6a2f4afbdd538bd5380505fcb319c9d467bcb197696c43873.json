{"ast":null,"code":"var _jsxFileName = \"D:\\\\000 IMP\\\\hps\\\\src\\\\scenes\\\\LiveMap\\\\index.jsx\",\n  _s = $RefreshSig$();\n// index.jsx\nimport React, { useState, useEffect } from 'react';\nimport { Map, GoogleApiWrapper, Marker } from 'google-maps-react';\nimport { app } from '../../firebase'; // Adjust the path as per your project structure\nimport { getDatabase, ref, onValue, off } from \"firebase/database\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst database = getDatabase(app);\nconst MapContainer = props => {\n  _s();\n  const [coordinates, setCoordinates] = useState({\n    lat: 0,\n    lng: 0\n  });\n  useEffect(() => {\n    const fetchCoordinates = () => {\n      const coordinatesRef = ref(database, 'coordinates'); // Reference to 'coordinates' node\n      onValue(coordinatesRef, snapshot => {\n        const coords = snapshot.val();\n        if (coords) {\n          setCoordinates(coords); // Set coordinates state\n        }\n      });\n\n      // Cleanup function to detach the listener when component unmounts\n      return () => {\n        off(coordinatesRef); // Detach listener\n      };\n    };\n    fetchCoordinates();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Map, {\n    google: props.google,\n    zoom: 14 // Adjust zoom level as needed\n    ,\n    initialCenter: {\n      lat: coordinates.lat,\n      lng: coordinates.lng\n    },\n    children: /*#__PURE__*/_jsxDEV(Marker, {\n      position: {\n        lat: coordinates.lat,\n        lng: coordinates.lng\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(MapContainer, \"qeQCOrG4pLBx2is3YUe2FumezIM=\");\n_c = MapContainer;\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyBt0EBeEOhb6s_nvQqPBh_vYMFQXFG6gBc' // Replace with your Google Maps API key\n})(MapContainer);\nvar _c;\n$RefreshReg$(_c, \"MapContainer\");","map":{"version":3,"names":["React","useState","useEffect","Map","GoogleApiWrapper","Marker","app","getDatabase","ref","onValue","off","jsxDEV","_jsxDEV","database","MapContainer","props","_s","coordinates","setCoordinates","lat","lng","fetchCoordinates","coordinatesRef","snapshot","coords","val","google","zoom","initialCenter","children","position","fileName","_jsxFileName","lineNumber","columnNumber","_c","apiKey","$RefreshReg$"],"sources":["D:/000 IMP/hps/src/scenes/LiveMap/index.jsx"],"sourcesContent":["// index.jsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Map, GoogleApiWrapper, Marker } from 'google-maps-react';\r\nimport { app } from '../../firebase'; // Adjust the path as per your project structure\r\nimport { getDatabase, ref, onValue, off } from \"firebase/database\";\r\n\r\n\r\nconst database = getDatabase(app);\r\nconst MapContainer = (props) => {\r\n  const [coordinates, setCoordinates] = useState({ lat: 0, lng: 0 });\r\n\r\n  useEffect(() => {\r\n    const fetchCoordinates = () => {\r\n      const coordinatesRef = ref(database, 'coordinates'); // Reference to 'coordinates' node\r\n      onValue(coordinatesRef, (snapshot) => {\r\n        const coords = snapshot.val();\r\n        if (coords) {\r\n          setCoordinates(coords); // Set coordinates state\r\n        }\r\n      });\r\n\r\n      // Cleanup function to detach the listener when component unmounts\r\n      return () => {\r\n        off(coordinatesRef); // Detach listener\r\n      };\r\n    };\r\n\r\n    fetchCoordinates();\r\n  }, []);\r\n\r\n  return (\r\n    <Map\r\n      google={props.google}\r\n      zoom={14} // Adjust zoom level as needed\r\n      initialCenter={{ lat: coordinates.lat, lng: coordinates.lng }}\r\n    >\r\n      <Marker position={{ lat: coordinates.lat, lng: coordinates.lng }} />\r\n    </Map>\r\n  );\r\n};\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: 'AIzaSyBt0EBeEOhb6s_nvQqPBh_vYMFQXFG6gBc' // Replace with your Google Maps API key\r\n})(MapContainer);\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,GAAG,EAAEC,gBAAgB,EAAEC,MAAM,QAAQ,mBAAmB;AACjE,SAASC,GAAG,QAAQ,gBAAgB,CAAC,CAAC;AACtC,SAASC,WAAW,EAAEC,GAAG,EAAEC,OAAO,EAAEC,GAAG,QAAQ,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGnE,MAAMC,QAAQ,GAAGN,WAAW,CAACD,GAAG,CAAC;AACjC,MAAMQ,YAAY,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC9B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGjB,QAAQ,CAAC;IAAEkB,GAAG,EAAE,CAAC;IAAEC,GAAG,EAAE;EAAE,CAAC,CAAC;EAElElB,SAAS,CAAC,MAAM;IACd,MAAMmB,gBAAgB,GAAGA,CAAA,KAAM;MAC7B,MAAMC,cAAc,GAAGd,GAAG,CAACK,QAAQ,EAAE,aAAa,CAAC,CAAC,CAAC;MACrDJ,OAAO,CAACa,cAAc,EAAGC,QAAQ,IAAK;QACpC,MAAMC,MAAM,GAAGD,QAAQ,CAACE,GAAG,CAAC,CAAC;QAC7B,IAAID,MAAM,EAAE;UACVN,cAAc,CAACM,MAAM,CAAC,CAAC,CAAC;QAC1B;MACF,CAAC,CAAC;;MAEF;MACA,OAAO,MAAM;QACXd,GAAG,CAACY,cAAc,CAAC,CAAC,CAAC;MACvB,CAAC;IACH,CAAC;IAEDD,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACET,OAAA,CAACT,GAAG;IACFuB,MAAM,EAAEX,KAAK,CAACW,MAAO;IACrBC,IAAI,EAAE,EAAG,CAAC;IAAA;IACVC,aAAa,EAAE;MAAET,GAAG,EAAEF,WAAW,CAACE,GAAG;MAAEC,GAAG,EAAEH,WAAW,CAACG;IAAI,CAAE;IAAAS,QAAA,eAE9DjB,OAAA,CAACP,MAAM;MAACyB,QAAQ,EAAE;QAAEX,GAAG,EAAEF,WAAW,CAACE,GAAG;QAAEC,GAAG,EAAEH,WAAW,CAACG;MAAI;IAAE;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjE,CAAC;AAEV,CAAC;AAAClB,EAAA,CA/BIF,YAAY;AAAAqB,EAAA,GAAZrB,YAAY;AAiClB,eAAeV,gBAAgB,CAAC;EAC9BgC,MAAM,EAAE,yCAAyC,CAAC;AACpD,CAAC,CAAC,CAACtB,YAAY,CAAC;AAAC,IAAAqB,EAAA;AAAAE,YAAA,CAAAF,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}