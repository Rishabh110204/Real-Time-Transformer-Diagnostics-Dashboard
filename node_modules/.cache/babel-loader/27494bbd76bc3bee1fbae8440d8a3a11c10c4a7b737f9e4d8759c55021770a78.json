{"ast":null,"code":"var _jsxFileName = \"D:\\\\000 IMP\\\\hps\\\\src\\\\scenes\\\\All_Temp\\\\index.jsx\",\n  _s = $RefreshSig$();\n// // TemperatureDisplay.js\n// import React, { useEffect, useState } from 'react';\n// import { database } from '../../firebase'; // Adjust path to firebase.js as per your project structure\n// import { ref, onValue, off } from \"firebase/database\";\n// import { Line } from 'react-chartjs-2';\n// import { Chart, registerables } from 'chart.js';\n// import './Temp.css'; // Import CSS file for styling\n\n// Chart.register(...registerables);\n\n// const TemperatureDisplay = () => {\n//   const [temperatures, setTemperatures] = useState([]);\n\n//   useEffect(() => {\n//     const temperaturesRef = ref(database, 'realtimedata');\n\n//     // Attach an event listener for changes in temperatures\n//     const unsubscribe = onValue(temperaturesRef, (snapshot) => {\n//       const tempData = snapshot.val();\n//       console.log('Fetched data from Firebase:', tempData); // Debug log\n//       if (tempData) {\n//         // Convert the snapshot to an array of objects\n//         const tempArray = Object.keys(tempData).map((key) => ({\n//           id: key,\n//           ...tempData[key],\n//           timestamp: tempData[key].timestamp || new Date().toISOString(), // Add current timestamp if missing\n//         }));\n//         console.log('Formatted temperature array:', tempArray); // Debug log\n//         setTemperatures(tempArray);\n//       }\n//     });\n\n//     // Clean up listener on component unmount\n//     return () => {\n//       off(temperaturesRef);\n//     };\n//   }, []);\n\n//   const formatChartData = (label, dataKey) => {\n//     const labels = temperatures.map(temp => new Date(temp.timestamp).toLocaleTimeString());\n//     const data = temperatures.map(temp => temp[dataKey]);\n//     console.log(`Data for ${label}:`, data); // Debug log\n\n//     return {\n//       labels,\n//       datasets: [{\n//         label,\n//         data,\n//         borderColor: 'rgba(75,192,192,1)',\n//         backgroundColor: 'rgba(75,192,192,0.2)',\n//         borderWidth: 2,\n//         fill: true\n//       }]\n//     };\n//   };\n\n//   return (\n//     <div className=\"temperature-container\">\n//       <h2>Real-Time Temperature Values</h2>\n//       <div className=\"chart-container\">\n//         <div className=\"chart\">\n//           <h3>Oil Temperature</h3>\n//           <Line data={formatChartData('Oil Temperature', 'ot')} />\n//         </div>\n//         <div className=\"chart\">\n//           <h3>LV Winding Temperature</h3>\n//           <Line data={formatChartData('LV Winding Temperature', 'lvt')} />\n//         </div>\n//         <div className=\"chart\">\n//           <h3>LV1 Winding Temperature</h3>\n//           <Line data={formatChartData('LV1 Winding Temperature', 'lv1t')} />\n//         </div>\n//         <div className=\"chart\">\n//           <h3>LV2 Winding Temperature</h3>\n//           <Line data={formatChartData('LV2 Winding Temperature', 'lv2t')} />\n//         </div>\n//         <div className=\"chart\">\n//           <h3>HV Winding Temperature</h3>\n//           <Line data={formatChartData('HV Winding Temperature', 'hvt')} />\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default TemperatureDisplay;\n\n// TemperatureChart.jsx\n// TemperatureChart.jsx\nimport React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { getDatabase, ref, onValue } from 'firebase/database';\nimport 'chart.js/auto';\nimport { database } from '../../firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TemperatureChart = () => {\n  _s();\n  const [chartData, setChartData] = useState({});\n  useEffect(() => {\n    const fetchTemperatureData = () => {\n      const dbRef = ref(getDatabase(database), 'realtimedata/ot');\n      onValue(dbRef, snapshot => {\n        const data = snapshot.val();\n        if (data) {\n          let temperatures = [];\n          let timestamps = [];\n          Object.values(data).forEach(entry => {\n            temperatures.push(entry.temperature);\n            timestamps.push(new Date(entry.timestamp).toLocaleString());\n          });\n          setChartData({\n            labels: timestamps,\n            datasets: [{\n              label: 'Temperature',\n              data: temperatures,\n              borderColor: 'rgba(75, 192, 192, 1)',\n              backgroundColor: 'rgba(75, 192, 192, 0.2)',\n              fill: true,\n              tension: 0.1\n            }]\n          });\n        }\n      });\n    };\n    fetchTemperatureData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Temperature Chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 5\n  }, this);\n};\n_s(TemperatureChart, \"qLlYZUJv3crif/0xI+dehEQf0o0=\");\n_c = TemperatureChart;\nexport default TemperatureChart;\nvar _c;\n$RefreshReg$(_c, \"TemperatureChart\");","map":{"version":3,"names":["React","useEffect","useState","Line","getDatabase","ref","onValue","database","jsxDEV","_jsxDEV","TemperatureChart","_s","chartData","setChartData","fetchTemperatureData","dbRef","snapshot","data","val","temperatures","timestamps","Object","values","forEach","entry","push","temperature","Date","timestamp","toLocaleString","labels","datasets","label","borderColor","backgroundColor","fill","tension","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/000 IMP/hps/src/scenes/All_Temp/index.jsx"],"sourcesContent":["// // TemperatureDisplay.js\r\n// import React, { useEffect, useState } from 'react';\r\n// import { database } from '../../firebase'; // Adjust path to firebase.js as per your project structure\r\n// import { ref, onValue, off } from \"firebase/database\";\r\n// import { Line } from 'react-chartjs-2';\r\n// import { Chart, registerables } from 'chart.js';\r\n// import './Temp.css'; // Import CSS file for styling\r\n\r\n// Chart.register(...registerables);\r\n\r\n// const TemperatureDisplay = () => {\r\n//   const [temperatures, setTemperatures] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     const temperaturesRef = ref(database, 'realtimedata');\r\n\r\n//     // Attach an event listener for changes in temperatures\r\n//     const unsubscribe = onValue(temperaturesRef, (snapshot) => {\r\n//       const tempData = snapshot.val();\r\n//       console.log('Fetched data from Firebase:', tempData); // Debug log\r\n//       if (tempData) {\r\n//         // Convert the snapshot to an array of objects\r\n//         const tempArray = Object.keys(tempData).map((key) => ({\r\n//           id: key,\r\n//           ...tempData[key],\r\n//           timestamp: tempData[key].timestamp || new Date().toISOString(), // Add current timestamp if missing\r\n//         }));\r\n//         console.log('Formatted temperature array:', tempArray); // Debug log\r\n//         setTemperatures(tempArray);\r\n//       }\r\n//     });\r\n\r\n//     // Clean up listener on component unmount\r\n//     return () => {\r\n//       off(temperaturesRef);\r\n//     };\r\n//   }, []);\r\n\r\n//   const formatChartData = (label, dataKey) => {\r\n//     const labels = temperatures.map(temp => new Date(temp.timestamp).toLocaleTimeString());\r\n//     const data = temperatures.map(temp => temp[dataKey]);\r\n//     console.log(`Data for ${label}:`, data); // Debug log\r\n\r\n//     return {\r\n//       labels,\r\n//       datasets: [{\r\n//         label,\r\n//         data,\r\n//         borderColor: 'rgba(75,192,192,1)',\r\n//         backgroundColor: 'rgba(75,192,192,0.2)',\r\n//         borderWidth: 2,\r\n//         fill: true\r\n//       }]\r\n//     };\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"temperature-container\">\r\n//       <h2>Real-Time Temperature Values</h2>\r\n//       <div className=\"chart-container\">\r\n//         <div className=\"chart\">\r\n//           <h3>Oil Temperature</h3>\r\n//           <Line data={formatChartData('Oil Temperature', 'ot')} />\r\n//         </div>\r\n//         <div className=\"chart\">\r\n//           <h3>LV Winding Temperature</h3>\r\n//           <Line data={formatChartData('LV Winding Temperature', 'lvt')} />\r\n//         </div>\r\n//         <div className=\"chart\">\r\n//           <h3>LV1 Winding Temperature</h3>\r\n//           <Line data={formatChartData('LV1 Winding Temperature', 'lv1t')} />\r\n//         </div>\r\n//         <div className=\"chart\">\r\n//           <h3>LV2 Winding Temperature</h3>\r\n//           <Line data={formatChartData('LV2 Winding Temperature', 'lv2t')} />\r\n//         </div>\r\n//         <div className=\"chart\">\r\n//           <h3>HV Winding Temperature</h3>\r\n//           <Line data={formatChartData('HV Winding Temperature', 'hvt')} />\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default TemperatureDisplay;\r\n\r\n\r\n// TemperatureChart.jsx\r\n// TemperatureChart.jsx\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { getDatabase, ref, onValue } from 'firebase/database';\r\nimport 'chart.js/auto';\r\nimport { database } from '../../firebase';\r\n\r\nconst TemperatureChart = () => {\r\n  const [chartData, setChartData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchTemperatureData = () => {\r\n      const dbRef = ref(getDatabase(database), 'realtimedata/ot');\r\n      onValue(dbRef, (snapshot) => {\r\n        const data = snapshot.val();\r\n        if (data) {\r\n          let temperatures = [];\r\n          let timestamps = [];\r\n\r\n          Object.values(data).forEach((entry) => {\r\n            temperatures.push(entry.temperature);\r\n            timestamps.push(new Date(entry.timestamp).toLocaleString());\r\n          });\r\n\r\n          setChartData({\r\n            labels: timestamps,\r\n            datasets: [\r\n              {\r\n                label: 'Temperature',\r\n                data: temperatures,\r\n                borderColor: 'rgba(75, 192, 192, 1)',\r\n                backgroundColor: 'rgba(75, 192, 192, 0.2)',\r\n                fill: true,\r\n                tension: 0.1,\r\n              },\r\n            ],\r\n          });\r\n        }\r\n      });\r\n    };\r\n\r\n    fetchTemperatureData();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h2>Temperature Chart</h2>\r\n      <Line data={chartData} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TemperatureChart;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,iBAAiB;AACtC,SAASC,WAAW,EAAEC,GAAG,EAAEC,OAAO,QAAQ,mBAAmB;AAC7D,OAAO,eAAe;AACtB,SAASC,QAAQ,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC,CAAC;EAE9CD,SAAS,CAAC,MAAM;IACd,MAAMa,oBAAoB,GAAGA,CAAA,KAAM;MACjC,MAAMC,KAAK,GAAGV,GAAG,CAACD,WAAW,CAACG,QAAQ,CAAC,EAAE,iBAAiB,CAAC;MAC3DD,OAAO,CAACS,KAAK,EAAGC,QAAQ,IAAK;QAC3B,MAAMC,IAAI,GAAGD,QAAQ,CAACE,GAAG,CAAC,CAAC;QAC3B,IAAID,IAAI,EAAE;UACR,IAAIE,YAAY,GAAG,EAAE;UACrB,IAAIC,UAAU,GAAG,EAAE;UAEnBC,MAAM,CAACC,MAAM,CAACL,IAAI,CAAC,CAACM,OAAO,CAAEC,KAAK,IAAK;YACrCL,YAAY,CAACM,IAAI,CAACD,KAAK,CAACE,WAAW,CAAC;YACpCN,UAAU,CAACK,IAAI,CAAC,IAAIE,IAAI,CAACH,KAAK,CAACI,SAAS,CAAC,CAACC,cAAc,CAAC,CAAC,CAAC;UAC7D,CAAC,CAAC;UAEFhB,YAAY,CAAC;YACXiB,MAAM,EAAEV,UAAU;YAClBW,QAAQ,EAAE,CACR;cACEC,KAAK,EAAE,aAAa;cACpBf,IAAI,EAAEE,YAAY;cAClBc,WAAW,EAAE,uBAAuB;cACpCC,eAAe,EAAE,yBAAyB;cAC1CC,IAAI,EAAE,IAAI;cACVC,OAAO,EAAE;YACX,CAAC;UAEL,CAAC,CAAC;QACJ;MACF,CAAC,CAAC;IACJ,CAAC;IAEDtB,oBAAoB,CAAC,CAAC;EACxB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEL,OAAA;IAAA4B,QAAA,gBACE5B,OAAA;MAAA4B,QAAA,EAAI;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC1BhC,OAAA,CAACN,IAAI;MAACc,IAAI,EAAEL;IAAU;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtB,CAAC;AAEV,CAAC;AAAC9B,EAAA,CA3CID,gBAAgB;AAAAgC,EAAA,GAAhBhC,gBAAgB;AA6CtB,eAAeA,gBAAgB;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}